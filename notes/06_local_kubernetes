----------------------------------------------------------------------------------
| CHAPTER 6 - LOCAL DEVELOPMENT WITH KUBERNETES                                  |
----------------------------------------------------------------------------------

- Implementing Multiple Services

    - Thoughts Backend 
        = handles storage of thoughts and search for them

    - Users Backend 
        = stores users and allows them to log in
        = creates a token that can be used to authenticate against other systems

    - Frontend
        = comes from monolith, but no longer accesses database directly



- The Users Backend Microservice

    - There are 2 endpoints in our API:

        POST /api/login/            # Login and return valid Auth header

        POST /admin/users/          # Create a new user

        # Input to both is {username: 'user', password: 'pw'}


    - The User model is very simple.

        class UserModel(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            username = db.Column(db.String(50))
            password = db.Column(db.String(50))     # Stored in plain text for simple example
            creation = db.Column(db.DateTime, server_default=func.now())



- Describing the Frontend Microservice

    - The frontend is based on the original Django monolith, only the database calls have been
        replaced with API calls.  We use the 'requests' library for this.


    - All of the Django ORM and data logic have been removed from the original app, since it no
        longer has its own DB.


    - For instance, here is the 'search.py' file, which now sends an API call.  The result is
        decoded in JSON and rendered in the template.

        import requests

        def search(request):
            username = get_username_from_session(request)
            search_param = request.GET.get('search')

            url = settings.THOUGHTS_BACKEND + '/api/thoughts/'
            params = {
                'search': search_param,
            }

            result = requests.get(url, params=params)
            results = result.json()

            context = {
                'thoughts': results,
                'username': username,
            }

            return render(request, 'search.html', context)


    - For an example that requires authentication, we can look at 'list_thoughts'.  Note that we store
        the authentication token in a session cookie between requests.

        def list_thoughts(request):
            username = get_username_from_session(request)
            if not username:
                return redirect('login')

            url = settings.THOUGHTS_BACKEND + '/api/me/thoughts/'
            headers = {
                'Authorization': request.COOKIES.get('session'),
            }

            result = requests.get(url, headers=headers)
            if result.status_code != http.client.OK:
                return redirect('login')

            context = {
                'thoughts': result.json(),
                'username': username,
            }

            return render(request, 'list_thoughts.html', context)

        def get_username_from_session(request):
            cookie_session = request.COOKIES.get('session')
            username = validate_token_header(cookie_session, settings.TOKENS_PUBLIC_KEY)

            if not username:
                return None

            return username



- Connecting the Services

    - We can test the services using only docker-compose if we want to.  The Thoughts Backend exposes
        port 8000 and the Users Backend exposes port 8001.  This allows the Frontend to connect to
        them (and expose port 8002).  docker-compose will create its own network for them to connect.


    - The Frontend service needs to connect to the others.  The URL of the services needs to be added
        to the 'environment.env' file.

        # Get local IP
        $ ifconfig

        # Add to environment.env
        THOUGHTS_BACKEND_URL=http://10.0.10.3:8000
        USER_BACKEND_URL=http://10.0.10.3:8001


    - Now, we just need to start each of the 3 services.

        # Start the thoughts backend
        $ cd thoughts_backend
        $ docker-compose up server

        # Start the users backend
        $ cd users_backend
        $ docker-compose up server

        # Start the frontend
        $ cd frontend
        $ docker-compose up server



- Configuring the Services

    - To configure the apps in Kubernetes, we need to define the following objects per app:

        1. Deployment
             = controls the creation of pods, so they will always be available
             = creates pods based on images specified, pod runs the app

        2. Service
             = makes the RESTful requests available inside the cluster
             = routes requests to any available pod

        3. Ingress
             = makes service available outside the cluster


    - We'll use the 'example' namespace.

        $ kubectl create namespace example



- Configuring the Deployment

    - For the Thoughts Backend, we will deploy a pod with 2 containers, one with the database and 
        the other with the application.

      We add the configuration in 'thoughts_backend/kubernetes/deployment.yaml'.


    - To get the deployment in Kubernetes, you need to apply the file.

        $ kubectl apply -f thoughts_backend/kubernetes/deployment.yaml


    - To check that the deployment has been created in the cluster:

        # View deployments
        $ kubectl get deployments -n example

        # View pods
        $ kubectl get pods -n example


    - The pods are created automatically by the deployment.  To see this, we can delete the pod and
        see that a new one has been created.

        # Delete pod
        $ kubectl delete pod thoughts-backend-55c686f6f5-9hnc8 -n example

        # Ensure that new pod has been started
        $ kubectl get pods -n example



- Configuring the Service

    - We create a Kubernetes service to create a name for the application exposed by the created
        deployment.  

        # thoughts_backend/kubernetes/service.yaml
        ---
        apiVersion: v1
        kind: Service
        metadata:
            namespace: example
            labels:
                app: thoughts-service
            name: thoughts-service
        spec:
            ports:
                - name: thoughts-backend
                  port: 80
                  targetPort: 8000
            selector:
                app: thoughts-backend
            type: NodePort


    - To add the service:

        $ kubectl apply -f kubernetes/service.yaml


    - Since we used 'NodePort' as the type of port, we can access the service from outside the
        cluster.  This allows us to check that it is working correctly.

        # Get external IP of service
        $ kubectl get service -n example

        # PORT(S) 
        # 80:30685/TCP


        # Now we can access the port to verify the service is working correctly.
        http://localhost:30685/



- Configuring the Ingress

    - Finally, we need to describe the Ingress in 'ingress.yaml'.

        # thoughts_backend/kubernetes/ingress.yaml
        ------------------------------------------------
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
            name: thoughts-backend-ingress
            namespace: example
        spec:
            rules:
                - host: thoughts.example.local
                  http:
                    paths:
                      - backend:
                          service:
                            name: thoughts-service
                            port:
                              number: 80
                        path: /
                        pathType: ImplementationSpecific


    - To add the ingress:

        $ kubectl apply -f kubernetes/ingress.yaml


    - To verify it has been added:

        $ kubectl get ingress -n


    - Now that we have added the ingress, we can try to access the thoughts backend.

        $ curl http://localhost
        404 page not found


    - What we need to do is be able to point any request to 'thoughts.example.local' to our
        localhost.  The easiest way to do this is to add a rule to our '/etc/hosts' file.

        # /etc/hosts
        ----------------------
        127.0.0.1 thoughts.example.local

      Defining different host entries for each service allows us to access all the services
        externally, which is very useful for debugging.


    - Now, we can access our service in a web browser:

        http://thoughts.example.local



- Deploying the Users Backend

    - Next, we can deploy the users_backend in much the same way.

        $ kubectl apply -f users_backend/kubernetes/deployment.yaml
        $ kubectl apply -f users_backend/kubernetes/service.yaml
        $ kubectl apply -f users_backend/kubernetes/ingress.yaml


    - And we need to add another entry to our '/etc/hosts' file:

        # /etc/hosts
        ------------------------
        127.0.0.1 users.example.local


    - Now we can access the users_backend service in our browser:

        http://users.example.local



- Adding the Frontend

    - We deploy the frontend as we have before.

        $ kubectl apply -f frontend/kubernetes/deployment.yaml
        $ kubectl apply -f frontend/kubernetes/service.yaml
        $ kubectl apply -f frontend/kubernetes/ingress.yaml


    - And we add another rule to '/etc/hosts'.

        # /etc/hosts
        --------------------------
        127.0.0.1 frontend.example.local


    - Note that we have added a rule in the Django app allowing all hosts.